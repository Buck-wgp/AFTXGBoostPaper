else {
needsCatch <- !caught
}
u[needsCatch] <- Inf
if (sum(l > u) > 0)
stop("warning: l > u! Bug in code")
isCensored <- rbinom(n = n, size = 1, prob = prob_cen) == 1
l[!isCensored] <- trueTimes[!isCensored]
u[!isCensored] <- trueTimes[!isCensored]
if (sum(l == Inf) > 0) {
allTimes <- c(l, u)
allFiniteTimes <- allTimes[allTimes < Inf]
maxFiniteTime <- max(allFiniteTimes)
l[l == Inf] <- maxFiniteTime
}
result        = list()
result$target = data.frame(as.numeric(l), as.numeric(u))
colnames(result$target) = c("l","u")
result$input = X
return(result)
}
analyze_target <- function(target){
left_censored     = 0
right_censored    = 0
interval_censored = 0
uncensored        = 0
n = length(target$l)
uncensored     = sum(target$l==target$u)
left_censored  = sum(target$l==Inf)
right_censored = sum(target$u==Inf)
interval_censored = n - uncensored - left_censored- right_censored
distribution = list()
distribution$uncensored        = uncensored
distribution$left_censored     = left_censored
distribution$right_censored    = right_censored
distribution$interval_censored = interval_censored
return(distribution)
}
### Draw Samples ###
sim_data = simIC_weib(dist='loglogistic',inspections = 2, inspectLength = 2.5)
target   = sim_data$target
input    = sim_data$input
par(mar = c(5,5,2,5))
plot(target$l,type='l',ylab='lower level',col='blue')
par(new = T)
plot(target$u,type='l' ,pch=16, axes=F, xlab=NA, ylab=NA, cex=1.2,col='red')
axis(side = 4)
mtext(side = 4, line = 3, 'upper level')
distribution = analyze_target(target)
print(distribution)
library("actuar")
set.seed(1)
### Supports 3 diff ###
#Weibull
#Loglogistic
#Lognormal
#qweibull
#qlnorm
#qllogis
model_1<-function(n=5000,d=100){
Z <- rnorm(n,0,0.5)
X <- data.frame(t(replicate(n, runif(d,-1,1))))
colnames(X) <- paste("X",seq(1,d),sep=".")
X.B         <- X[,"X.1"]*X[,"X.2"]+X[,"X.3"]**2-X[,"X.4"]*X[,"X.7"]+X["X.8"]*X[,"X.10"]-X[,"X.6"]**2+Z
result     <- list()
result$X.B <- X.B
result$X   <- X
return(result)
}
simEventTime <- function(linPred = 0, model = 'aft',
dist = qweibull,
paramList = list(shape = 1, scale = 1)){
n <- length(linPred)
rawP <- runif(n)
nu <- exp(linPred)
if(model == 'aft'){
paramList$p <- rawP
rawTimes <- do.call(dist, paramList)
ans <- rawTimes * nu
return(ans)
}
}
simIC_weib <- function(n = 1000, d=100, model = "aft", dist = "weibull", inspections = 2,
inspectLength = 2.5,prob_cen = 1, model_type="1", shape = 2,
scale = 2, meanlog = 0, sdlog = 1, rndDigits = NULL){
## Create XB ##
linPred <- model_1(n=n,d=d)$X.B
X       <- model_1(n=n,d=d)$X
if(dist=="weibull"){
dist = qweibull
paramList = list(shape = shape, scale = scale)
}
else if(dist=="lognormal")
{
dist      = qlnorm
paramList = list(meanlog = meanlog, sdlog = sdlog)
}
else if(dist=="loglogistic"){
dist = qllogis
paramList = list(shape = shape, scale = scale)
}
trueTimes <- simEventTime(linPred, model = model, dist = dist,
paramList = paramList)
obsTimes <- runif(n = n, max = inspectLength)
if (!is.null(rndDigits))
obsTimes <- round(obsTimes, rndDigits)
l <- rep(0, n)
u <- rep(0, n)
caught <- trueTimes < obsTimes
u[caught] <- obsTimes[caught]
l[!caught] <- obsTimes[!caught]
if (inspections > 1) {
for (i in 2:inspections) {
oldObsTimes <- obsTimes
obsTimes <- oldObsTimes + runif(n, max = inspectLength)
if (!is.null(rndDigits))
obsTimes <- round(obsTimes, rndDigits)
caught <- trueTimes >= oldObsTimes & trueTimes < obsTimes
needsCatch <- trueTimes > obsTimes
u[caught] <- obsTimes[caught]
l[needsCatch] <- obsTimes[needsCatch]
}
}
else {
needsCatch <- !caught
}
u[needsCatch] <- Inf
if (sum(l > u) > 0)
stop("warning: l > u! Bug in code")
isCensored <- rbinom(n = n, size = 1, prob = prob_cen) == 1
l[!isCensored] <- trueTimes[!isCensored]
u[!isCensored] <- trueTimes[!isCensored]
if (sum(l == Inf) > 0) {
allTimes <- c(l, u)
allFiniteTimes <- allTimes[allTimes < Inf]
maxFiniteTime <- max(allFiniteTimes)
l[l == Inf] <- maxFiniteTime
}
result        = list()
result$target = data.frame(as.numeric(l), as.numeric(u))
colnames(result$target) = c("l","u")
result$input = X
return(result)
}
analyze_target <- function(target){
left_censored     = 0
right_censored    = 0
interval_censored = 0
uncensored        = 0
n = length(target$l)
uncensored     = sum(target$l==target$u)
left_censored  = sum(target$l==Inf)
right_censored = sum(target$u==Inf)
interval_censored = n - uncensored - left_censored- right_censored
distribution = list()
distribution$uncensored        = uncensored
distribution$left_censored     = left_censored
distribution$right_censored    = right_censored
distribution$interval_censored = interval_censored
return(distribution)
}
### Draw Samples ###
sim_data = simIC_weib(dist='loglogistic',inspections = 2, inspectLength = 2.5)
target   = sim_data$target
input    = sim_data$input
par(mar = c(5,5,2,5))
plot(target$l,type='l',ylab='lower level',col='blue')
par(new = T)
plot(target$u,type='l' ,pch=16, axes=F, xlab=NA, ylab=NA, cex=1.2,col='red')
axis(side = 4)
mtext(side = 4, line = 3, 'upper level')
distribution = analyze_target(target)
print(distribution)
write.table(target,"sim_data_model_1_n_5000,d_100.csv")
install.packages("configr")
library(configr)
config.json <- system.file('extdata', 'config.json', package='configr')
config.json
list.test <- list(a=c(123,456))
out.fn    <- sprintf("%s/test.json", tempdir())
write.config(config.dat = list.test, file.path = out.fn, write.type = "json")
tempdir()
getwd()
# Generate a JSON format configuration file
list.test <- list(a=c(123,456))
out.fn    <- sprintf("%s/test.json", getwd())
write.config(config.dat = list.test, file.path = out.fn, write.type = "json")
get.config.type(out.fn)
json_string <- '{"city" : "Crich"}\n'
yaml_string <- 'foo: 123\n'
json_config <- str2config(json_string)
out.fn    <- sprintf("%s/test.json", getwd())
write.config(config.dat = json_config, file.path = out.fn, write.type = "json")
input_param <- list("sim_data_1.csv"="param")
out.fn      <- sprintf("%s/test.json", getwd())
write.config(config.dat = input_param, file.path = out.fn, write.type = "json")
input_param <- list("sim_data_1.csv"="param"=list(n=5000,d=100))
out.fn      <- sprintf("%s/test.json", getwd())
write.config(config.dat = input_param, file.path = out.fn, write.type = "json")
input_param <- list("sim_data_1.csv"=param)
param       = list(n=5000,d=100)
out.fn      <- sprintf("%s/test.json", getwd())
param       = list(n=5000,d=100)
input_param <- list("sim_data_1.csv"=param)
out.fn      <- sprintf("%s/test.json", getwd())
param       = list(n=5000,d=100)
input_param <- list("sim_data_1.csv"=param)
out.fn      <- sprintf("%s/test.json", getwd())
write.config(config.dat = input_param, file.path = out.fn, write.type = "json")
getwd()
getwd()
paste(getwd(),"/config",sep="")
install.packages("configr")
library(configr)
### Generate a JSON format configuration file ###
param       <- list(n=5000,d=100,dist="weibull",shape=2,scale=2,inspections=2,inspectLength=2.5)
input_param <- list("sim_data_1.csv"=param)
path        <- path(getwd(),"/config",sep="")
out.fn      <- sprintf("%s/config.json",path)
write.config(config.dat = input_param, file.path = out.fn, write.type = "json")
install.packages("configr")
library(configr)
### Generate a JSON format configuration file ###
param       <- list(n=5000,d=100,dist="weibull",shape=2,scale=2,inspections=2,inspectLength=2.5)
input_param <- list("sim_data_1.csv"=param)
path        <- path(getwd(),"/config",sep="")
out.fn      <- sprintf("%s/config.json",path)
write.config(config.dat = input_param, file.path = out.fn, write.type = "json")
getwd()
library(configr)
### Generate a JSON format configuration file ###
param       <- list(n=5000,d=100,dist="weibull",shape=2,scale=2,inspections=2,inspectLength=2.5,seed=1)
input_param <- list("sim_data_1.csv"=param)
path        <- paste(getwd(),"/config",sep="")
out.fn      <- sprintf("%s/config.json",path)
write.config(config.dat = input_param, file.path = out.fn, write.type = "json")
config.1 <- read.config(file = config.json)
View(config.1)
file_name = paste(path,"/config.json",sep="")
config.1 <- read.config(file = file_name)
View(config.1)
config.1
names(config.1)
config.1$"sim_data_1.csv"
names(config.1$sim_data_1.csv)
library(configr)
### Generate a JSON format configuration file ###
param       <- list(n=5000,d=100,dist="weibull",model=1,shape=2,scale=2,inspections=2,inspectLength=2.5,seed=1)
input_param <- list("sim_data_1.csv"=param)
path        <- paste(getwd(),"/config",sep="")
out.fn      <- sprintf("%s/config.json",path)
write.config(config.dat = input_param, file.path = out.fn, write.type = "json")
file_name = paste(path,"/config.json",sep="")
config.1   <- read.config(file = file_name)
config.1
library("actuar")
set.seed(1)
### Supports 3 diff ###
#Weibull
#Loglogistic
#Lognormal
#qweibull
#qlnorm
#qllogis
model_1<-function(n=5000,d=100){
Z <- rnorm(n,0,0.5)
X <- data.frame(t(replicate(n, runif(d,-1,1))))
colnames(X) <- paste("X",seq(1,d),sep=".")
X.B         <- X[,"X.1"]*X[,"X.2"]+X[,"X.3"]**2-X[,"X.4"]*X[,"X.7"]+X["X.8"]*X[,"X.10"]-X[,"X.6"]**2+Z
result     <- list()
result$X.B <- X.B
result$X   <- X
return(result)
}
simEventTime <- function(linPred = 0, model = 'aft',
dist = qweibull,
paramList = list(shape = 1, scale = 1)){
n <- length(linPred)
rawP <- runif(n)
nu <- exp(linPred)
if(model == 'aft'){
paramList$p <- rawP
rawTimes <- do.call(dist, paramList)
ans <- rawTimes * nu
return(ans)
}
}
simIC_weib <- function(n = 1000, d=100, model = "aft", dist = "weibull", inspections = 2,
inspectLength = 2.5,prob_cen = 1, model_type="1", shape = 2,
scale = 2, meanlog = 0, sdlog = 1, rndDigits = NULL){
### Create XB ###
if(model_type=="1"){
linPred <- model_1(n=n,d=d)$X.B
X       <- model_1(n=n,d=d)$X
}
if(dist=="weibull"){
dist = qweibull
paramList = list(shape = shape, scale = scale)
}
else if(dist=="lognormal")
{
dist      = qlnorm
paramList = list(meanlog = meanlog, sdlog = sdlog)
}
else if(dist=="loglogistic"){
dist = qllogis
paramList = list(shape = shape, scale = scale)
}
trueTimes <- simEventTime(linPred, model = model, dist = dist,
paramList = paramList)
obsTimes <- runif(n = n, max = inspectLength)
if (!is.null(rndDigits))
obsTimes <- round(obsTimes, rndDigits)
l <- rep(0, n)
u <- rep(0, n)
caught <- trueTimes < obsTimes
u[caught] <- obsTimes[caught]
l[!caught] <- obsTimes[!caught]
if (inspections > 1) {
for (i in 2:inspections) {
oldObsTimes <- obsTimes
obsTimes <- oldObsTimes + runif(n, max = inspectLength)
if (!is.null(rndDigits))
obsTimes <- round(obsTimes, rndDigits)
caught <- trueTimes >= oldObsTimes & trueTimes < obsTimes
needsCatch <- trueTimes > obsTimes
u[caught] <- obsTimes[caught]
l[needsCatch] <- obsTimes[needsCatch]
}
}
else {
needsCatch <- !caught
}
u[needsCatch] <- Inf
if (sum(l > u) > 0)
stop("warning: l > u! Bug in code")
isCensored <- rbinom(n = n, size = 1, prob = prob_cen) == 1
l[!isCensored] <- trueTimes[!isCensored]
u[!isCensored] <- trueTimes[!isCensored]
if (sum(l == Inf) > 0) {
allTimes <- c(l, u)
allFiniteTimes <- allTimes[allTimes < Inf]
maxFiniteTime <- max(allFiniteTimes)
l[l == Inf] <- maxFiniteTime
}
result        = list()
result$target = data.frame(as.numeric(l), as.numeric(u))
colnames(result$target) = c("l","u")
result$input = X
return(result)
}
analyze_target <- function(target){
left_censored     = 0
right_censored    = 0
interval_censored = 0
uncensored        = 0
n = length(target$l)
uncensored     = sum(target$l==target$u)
left_censored  = sum(target$l==Inf)
right_censored = sum(target$u==Inf)
interval_censored = n - uncensored - left_censored- right_censored
distribution = list()
distribution$uncensored        = uncensored
distribution$left_censored     = left_censored
distribution$right_censored    = right_censored
distribution$interval_censored = interval_censored
return(distribution)
}
### Draw Samples ###
sim_data = simIC_weib(dist='weibull',inspections = 2, inspectLength = 2.5)
target   = sim_data$target
input    = sim_data$input
par(mar = c(5,5,2,5))
plot(target$l,type='l',ylab='lower level',col='blue')
par(new = T)
plot(target$u,type='l' ,pch=16, axes=F, xlab=NA, ylab=NA, cex=1.2,col='red')
axis(side = 4)
mtext(side = 4, line = 3, 'upper level')
distribution = analyze_target(target)
#print(distribution)
write.table(target,"/Users/avinashbarnwal/Desktop/Personal/aftXgboostPaper/data/sim_data_1.csv")
source("simIC.R")
sim_data = simIC_weib(dist='weibull',inspections = 2, inspectLength = 2.5)
target   = sim_data$target
input    = sim_data$input
par(mar = c(5,5,2,5))
plot(target$l,type='l',ylab='lower level',col='blue')
par(new = T)
plot(target$u,type='l' ,pch=16, axes=F, xlab=NA, ylab=NA, cex=1.2,col='red')
axis(side = 4)
mtext(side = 4, line = 3, 'upper level')
distribution = analyze_target(target)
### print(distribution) ###
write.table(target,"/Users/avinashbarnwal/Desktop/Personal/aftXgboostPaper/data/simulate/sim_data_1/target.csv",sep=",",row.names = FALSE)
sim_data = simIC_weib(n = 5000, d=100,dist='weibull',inspections = 2, inspectLength = 2.5)
target   = sim_data$target
input    = sim_data$input
par(mar = c(5,5,2,5))
plot(target$l,type='l',ylab='lower level',col='blue')
par(new = T)
plot(target$u,type='l' ,pch=16, axes=F, xlab=NA, ylab=NA, cex=1.2,col='red')
axis(side = 4)
mtext(side = 4, line = 3, 'upper level')
distribution = analyze_target(target)
### print(distribution) ###
write.table(target,"/Users/avinashbarnwal/Desktop/Personal/aftXgboostPaper/data/simulate/sim_data_1/target.csv",sep=",",row.names = FALSE)
source("simIC.R")
sim_data = simIC_weib(n = 5000, d=100,dist='weibull',inspections = 2, inspectLength = 2.5)
target   = sim_data$target
input    = sim_data$input
par(mar = c(5,5,2,5))
plot(target$l,type='l',ylab='lower level',col='blue')
par(new = T)
plot(target$u,type='l' ,pch=16, axes=F, xlab=NA, ylab=NA, cex=1.2,col='red')
axis(side = 4)
mtext(side = 4, line = 3, 'upper level')
distribution = analyze_target(target)
### print(distribution) ###
write.table(target,"/Users/avinashbarnwal/Desktop/Personal/aftXgboostPaper/data/simulate/sim_data_1/target.csv",sep=",",row.names = FALSE)
write.table(input,"/Users/avinashbarnwal/Desktop/Personal/aftXgboostPaper/data/simulate/sim_data_1/input.csv",sep=",",row.names = FALSE)
source("simIC.R")
set.seed(1)
sim_data = simIC_weib(n = 5000, d=100,dist='weibull',inspections = 2, inspectLength = 2.5)
target   = sim_data$target
input    = sim_data$input
par(mar = c(5,5,2,5))
plot(target$l,type='l',ylab='lower level',col='blue')
par(new = T)
plot(target$u,type='l' ,pch=16, axes=F, xlab=NA, ylab=NA, cex=1.2,col='red')
axis(side = 4)
mtext(side = 4, line = 3, 'upper level')
distribution = analyze_target(target)
### print(distribution) ###
write.table(target,"/Users/avinashbarnwal/Desktop/Personal/aftXgboostPaper/data/simulate/sim_data_1/target.csv",sep=",",row.names = FALSE)
write.table(input,"/Users/avinashbarnwal/Desktop/Personal/aftXgboostPaper/data/simulate/sim_data_1/input.csv",sep=",",row.names = FALSE)
ss <- sample(1:4,size=n,prob=c(1/4,1/4,1/4,1/4))
n         = 5000
ss <- sample(1:4,size=n,prob=c(1/4,1/4,1/4,1/4))
ss <- sample(1:4,size=n,replace=TRUE,prob=c(1/4,1/4,1/4,1/4))
ss
ss==1
which(ss==1)
ss    <- sample(1:4,size=n,replace=TRUE,prob=c(1/4,1/4,1/4,1/4))
fold_1<-which(ss==1)
fold_2<-which(ss==2)
fold_3<-which(ss==3)
fold_4<-which(ss==4)
fold_1
fold_4
ss
fold_1<-data.frame(id = which(ss==1))
fold_2<-data.frame(id = which(ss==2))
fold_3<-data.frame(id = which(ss==3))
fold_4<-data.frame(id = which(ss==4))
write.table(fold_1,"fold_1_id.csv",sep=",")
write.table(fold_2,"fold_2_id.csv",sep=",")
write.table(fold_3,"fold_3_id.csv",sep=",")
write.table(fold_4,"fold_4_id.csv",sep=",")
ss    <- sample(1:4,size=n,replace=TRUE,prob=c(1/4,1/4,1/4,1/4))
fold_1<-data.frame(id = which(ss==1))
fold_2<-data.frame(id = which(ss==2))
fold_3<-data.frame(id = which(ss==3))
fold_4<-data.frame(id = which(ss==4))
write.table(fold_1,"/Users/avinashbarnwal/Desktop/Personal/aftXgboostPaper/data/simulate/sim_data_1/fold_1_id.csv",sep=",")
write.table(fold_2,"/Users/avinashbarnwal/Desktop/Personal/aftXgboostPaper/data/simulate/sim_data_1/fold_2_id.csv",sep=",")
write.table(fold_3,"/Users/avinashbarnwal/Desktop/Personal/aftXgboostPaper/data/simulate/sim_data_1/fold_3_id.csv",sep=",")
write.table(fold_4,"/Users/avinashbarnwal/Desktop/Personal/aftXgboostPaper/data/simulate/sim_data_1/fold_4_id.csv",sep=",")
ss    <- sample(1:4,size=n,replace=TRUE,prob=c(1/4,1/4,1/4,1/4))
fold_1<-data.frame(id = which(ss==1))
fold_2<-data.frame(id = which(ss==2))
fold_3<-data.frame(id = which(ss==3))
fold_4<-data.frame(id = which(ss==4))
write.table(fold_1,"/Users/avinashbarnwal/Desktop/Personal/aftXgboostPaper/data/simulate/sim_data_1/fold_1_id.csv",sep=",")
write.table(fold_2,"/Users/avinashbarnwal/Desktop/Personal/aftXgboostPaper/data/simulate/sim_data_1/fold_2_id.csv",sep=",")
write.table(fold_3,"/Users/avinashbarnwal/Desktop/Personal/aftXgboostPaper/data/simulate/sim_data_1/fold_3_id.csv",sep=",")
write.table(fold_4,"/Users/avinashbarnwal/Desktop/Personal/aftXgboostPaper/data/simulate/sim_data_1/fold_4_id.csv",sep=",")
ss    <- sample(1:4,size=n,replace=TRUE,prob=c(1/4,1/4,1/4,1/4))
fold_1<-data.frame(id = which(ss==1))
fold_2<-data.frame(id = which(ss==2))
fold_3<-data.frame(id = which(ss==3))
fold_4<-data.frame(id = which(ss==4))
write.table(fold_1,"/Users/avinashbarnwal/Desktop/Personal/aftXgboostPaper/data/simulate/sim_data_1/fold_1_id.csv",sep=",",row.names = FALSE)
write.table(fold_2,"/Users/avinashbarnwal/Desktop/Personal/aftXgboostPaper/data/simulate/sim_data_1/fold_2_id.csv",sep=",",row.names = FALSE)
write.table(fold_3,"/Users/avinashbarnwal/Desktop/Personal/aftXgboostPaper/data/simulate/sim_data_1/fold_3_id.csv",sep=",",row.names = FALSE)
write.table(fold_4,"/Users/avinashbarnwal/Desktop/Personal/aftXgboostPaper/data/simulate/sim_data_1/fold_4_id.csv",sep=",",row.names = FALSE)
source("simIC.R")
set.seed(1)
sim_data = simIC_weib(n = 5000, d=100, dist='weibull', inspections = 2, inspectLength = 2.5)
target   = sim_data$target
input    = sim_data$input
par(mar = c(5,5,2,5))
plot(target$l,type='l',ylab='lower level',col='blue')
par(new = T)
plot(target$u,type='l' ,pch=16, axes=F, xlab=NA, ylab=NA, cex=1.2,col='red')
axis(side = 4)
mtext(side = 4, line = 3, 'upper level')
distribution = analyze_target(target)
### print(distribution) ###
n         = 5000
target$id = seq(1,n)
input$id  = seq(1,n)
write.table(target,"/Users/avinashbarnwal/Desktop/Personal/aftXgboostPaper/data/simulate/sim_data_1/target.csv",sep=",",row.names = FALSE)
write.table(input,"/Users/avinashbarnwal/Desktop/Personal/aftXgboostPaper/data/simulate/sim_data_1/input.csv",sep=",",row.names = FALSE)
n         <- 5000
target$id <- seq(1,n)
input$id  <- seq(1,n)
write.table(target,"/Users/avinashbarnwal/Desktop/Personal/aftXgboostPaper/data/simulate/sim_data_1/target.csv",sep=",",row.names = FALSE)
write.table(input,"/Users/avinashbarnwal/Desktop/Personal/aftXgboostPaper/data/simulate/sim_data_1/input.csv",sep=",",row.names = FALSE)
fold      <- sample(1:4,size=n,replace=TRUE,prob=c(1/4,1/4,1/4,1/4))
id        <- seq(1,n)
fold_data <- data.frame(fold = fold,id=id)
write.table(fold_data,"/Users/avinashbarnwal/Desktop/Personal/aftXgboostPaper/data/simulate/sim_data_1/folds.csv",sep=",",row.names = FALSE)
